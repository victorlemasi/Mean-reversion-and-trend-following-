https://www.mql5.com# Copyright 2024, MetaQuotes Ltd.
# https://www.mql5.com

from datetime import datetime
import MetaTrader5 as mt5
import yfinance as yf
import pandas as pd
import time

# Initialize MetaTrader 5
mt5.initialize()

# Define the ticker and condition variable
ticker = "AAPL"
condition_met = False  # Will track whether the condition is met

# Function to fetch historical data
def fetch_historical_data():
    print("\nFetching historical data...")
    data = yf.download(ticker, start="2023-01-01", end="2023-12-01", interval="1d")
    data = data[['Adj Close']].rename(columns={'Adj Close': 'Price'})
    
    # Set the 6-month window size (approx. 126 trading days)
    window_size = 126
    
    # Calculate indicators for Mean Reversion
    data['SMA'] = data['Price'].rolling(window=window_size).mean()
    data['StdDev'] = data['Price'].rolling(window=window_size).std()
    data['UpperBand'] = data['SMA'] + 2 * data['StdDev']
    data['LowerBand'] = data['SMA'] - 2 * data['StdDev']
    
    # Calculate indicators for Market Trend
    short_window = 42  # 2-month moving average
    long_window = 126  # 6-month moving average
    data['ShortSMA'] = data['Price'].rolling(window=short_window).mean()
    data['LongSMA'] = data['Price'].rolling(window=long_window).mean()
    
    return data

# Function to fetch live data
def fetch_live_data():
    print("\nFetching live data...")
    live_data = yf.download(tickers=ticker, period="1d", interval="1m")
    live_data = live_data[['Adj Close']].rename(columns={'Adj Close': 'Price'})
    return live_data

# Compare historical data with live data
def compare_historical_with_live(historical, live):
    global condition_met
    print("\n--- Comparing Historical and Live Data ---")
    
    # Get the last row from historical data
    last_historical = historical.iloc[-1]
    
    # Get the most recent live price
    live_price = live['Price'].iloc[-1]
    
    # Check Mean Reversion conditions
    if live_price < last_historical['LowerBand']:
        print(f"Buy signal: Live price {live_price} below lower band ({last_historical['LowerBand']})")
        condition_met = True
    elif live_price > last_historical['UpperBand']:
        print(f"Sell signal: Live price {live_price} above upper band ({last_historical['UpperBand']})")
        condition_met = True
    
    # Check Trend Following conditions
    short_sma = historical['ShortSMA'].iloc[-1]
    long_sma = historical['LongSMA'].iloc[-1]
    
    if short_sma > long_sma and live_price > short_sma:
        print(f"Trend UP signal: Live price {live_price} above Short SMA ({short_sma}) and Short SMA above Long SMA ({long_sma})")
        condition_met = True
    elif short_sma < long_sma and live_price < short_sma:
        print(f"Trend DOWN signal: Live price {live_price} below Short SMA ({short_sma}) and Short SMA below Long SMA ({long_sma})")
        condition_met = True
    
    if not condition_met:
        print("No trading condition met. Retrying...")

# Fetch historical data once
historical_data = fetch_historical_data()

# Main loop
while not condition_met:
    try:
        # Fetch live data
        live_data = fetch_live_data()
        
        # Compare historical data with live data
        compare_historical_with_live(historical_data, live_data)
    except Exception as e:
        print(f"An error occurred: {e}")
    
    # Wait for 5 minutes before re-running
    print("Sleeping for 5 minutes...")
    time.sleep(300)  # 5 minutes = 300 seconds

# Shutdown MetaTrader 5
mt5.shutdown()
